%{
#include <stdio.h>

#include "amd64/amd64.h"
#include "op.h"
#include "util.h"

// Read a byte from input.
#define YY_INPUT(ctx, buf, result, max_size)      \
{                                                 \
    result = fread(buf, 1, max_size, ctx->input); \
}                                                 \
%}

Top = Insn* !.

Insn = - Label? (
      FnDirective
    | BundleDirective
    | Directive Comment?
    | Comment
    | AnyPrefix
    | Any
) Comment? (EOL | ';')+

Comment = ((('//' | '#') (!EOL .)*) | ('/*' (!'*/' .)* '*/'))

Label = < ([0-9]+ | ID) > ':' - {
    mklabel(strndup(yytext, yyleng));
}

Directive = < '.' (!EOL .)* > - {
    mkdirective(strndup(yytext, yyleng));
}

BundleDirective = < '.bundle_align' (!EOL .)* > - {
    mkdirective(bundle_align());
}

FnDirective = < '.type' - ([^,])* ',' - [@%] 'function' - > {
    mkdirective(xasprintf("%s", yytext));
    mkdirective(bundle_align());
}

PREFIX = < ('lock' | 'rep' | 'rex64' | 'rex') > [ \t\r\n;]+ {
    $$ = (Result) { .val = strndup(yytext, yyleng) }
}

AnyPrefix = p:PREFIX rest:RemainderOrComment {
    mkinsn("%s %s", p.val, rest.val);
}

Any = rest:RemainderOrComment {
    if (strlen(rest.val) > 0)
        mkinsn("%s", rest.val);
}

RemainderOrComment = < (!(EOL | ';' | '/*' | '//' | '#') .)* > { $$ = (Result) { .val = strndup(yytext, yyleng) } }

%%

bool
amd64_parseinit(FILE* input)
{
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.input = input;
    bool success = yyparse(&ctx);
    yyrelease(&ctx);
    return success;
}
